// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	model "github.com/LuisTejedaS/ondemand-go-bootcamp/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// PokemonInteractor is an autogenerated mock type for the PokemonInteractor type
type PokemonInteractor struct {
	mock.Mock
}

// Get provides a mock function with given fields: p
func (_m *PokemonInteractor) Get(p []*model.Pokemon) ([]*model.Pokemon, error) {
	ret := _m.Called(p)

	var r0 []*model.Pokemon
	if rf, ok := ret.Get(0).(func([]*model.Pokemon) []*model.Pokemon); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*model.Pokemon) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: p, id
func (_m *PokemonInteractor) GetById(p *model.Pokemon, id int) (*model.Pokemon, error) {
	ret := _m.Called(p, id)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(*model.Pokemon, int) *model.Pokemon); ok {
		r0 = rf(p, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Pokemon, int) error); ok {
		r1 = rf(p, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPokemonInteractor creates a new instance of PokemonInteractor. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokemonInteractor(t testing.TB) *PokemonInteractor {
	mock := &PokemonInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
