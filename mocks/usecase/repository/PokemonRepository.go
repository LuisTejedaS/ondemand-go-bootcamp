// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	model "github.com/LuisTejedaS/ondemand-go-bootcamp/domain/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PokemonRepository is an autogenerated mock type for the PokemonRepository type
type PokemonRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: u
func (_m *PokemonRepository) FindAll(u []*model.Pokemon) ([]*model.Pokemon, error) {
	ret := _m.Called(u)

	var r0 []*model.Pokemon
	if rf, ok := ret.Get(0).(func([]*model.Pokemon) []*model.Pokemon); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*model.Pokemon) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: u, id
func (_m *PokemonRepository) FindById(u *model.Pokemon, id int) (*model.Pokemon, error) {
	ret := _m.Called(u, id)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(*model.Pokemon, int) *model.Pokemon); ok {
		r0 = rf(u, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Pokemon, int) error); ok {
		r1 = rf(u, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPokemonRepository creates a new instance of PokemonRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokemonRepository(t testing.TB) *PokemonRepository {
	mock := &PokemonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
