// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	model "github.com/LuisTejedaS/ondemand-go-bootcamp/domain/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PokemonService is an autogenerated mock type for the PokemonService type
type PokemonService struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: _a0
func (_m *PokemonService) FindAll(_a0 []*model.Pokemon) ([]*model.Pokemon, error) {
	ret := _m.Called(_a0)

	var r0 []*model.Pokemon
	if rf, ok := ret.Get(0).(func([]*model.Pokemon) []*model.Pokemon); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*model.Pokemon) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: _a0, _a1
func (_m *PokemonService) FindById(_a0 *model.Pokemon, _a1 int) (*model.Pokemon, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(*model.Pokemon, int) *model.Pokemon); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Pokemon, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPokemons provides a mock function with given fields:
func (_m *PokemonService) LoadPokemons() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPokemonService creates a new instance of PokemonService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPokemonService(t testing.TB) *PokemonService {
	mock := &PokemonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
